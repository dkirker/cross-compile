diff --git a/gst/typefind/gsttypefindfunctions.c b/gst/typefind/gsttypefindfunctions.c
index 29d24b2..e13ad7f 100644
--- a/gst/typefind/gsttypefindfunctions.c
+++ b/gst/typefind/gsttypefindfunctions.c
@@ -479,6 +479,50 @@ id3v1_type_find (GstTypeFind * tf, gpointer unused)
 }
 
 #ifdef MIME_TYPE_SUPPORTED_FOR_PALM_DOT_FIVE
+/*** audio/x-flac ***/
+static GstStaticCaps flac_caps = GST_STATIC_CAPS ("audio/x-flac");
+#define FLAC_CAPS (gst_static_caps_get(&flac_caps))
+static void
+flac_type_find (GstTypeFind * tf, gpointer unused)
+{
+  guint8 *data;
+
+  data = gst_type_find_peek (tf, 0, 5);
+  if (G_LIKELY (data)) {
+    /* standard flac */
+    if (memcmp (data, "fLaC", 4) == 0) {
+      gst_type_find_suggest (tf, GST_TYPE_FIND_MAXIMUM, FLAC_CAPS);
+    }
+    /* flac-in-ogg, see http://flac.sourceforge.net/ogg_mapping.html */
+    else if (memcmp (data, "\177FLAC\001", 6) == 0) {
+      gst_type_find_suggest (tf, GST_TYPE_FIND_MAXIMUM, FLAC_CAPS);
+    }
+  }
+}
+/*** application/ogg and application/x-annodex ***/
+static GstStaticCaps ogg_caps = GST_STATIC_CAPS ("application/ogg");
+static GstStaticCaps annodex_caps = GST_STATIC_CAPS ("application/x-annodex");
+
+#define OGGANX_CAPS (gst_static_caps_get(&annodex_caps))
+
+static void
+ogganx_type_find (GstTypeFind * tf, gpointer private)
+{
+  guint8 *data = gst_type_find_peek (tf, 0, 4);
+
+  if ((data != NULL) && (memcmp (data, "OggS", 4) == 0)) {
+
+    /* Check for an annodex fishbone header */
+    data = gst_type_find_peek (tf, 28, 8);
+    if (data && memcmp (data, "fishead\0", 8) == 0)
+      gst_type_find_suggest (tf, GST_TYPE_FIND_MAXIMUM, OGGANX_CAPS);
+
+    gst_type_find_suggest (tf, GST_TYPE_FIND_MAXIMUM,
+        gst_static_caps_get (&ogg_caps));
+  }
+}
+
+
 #else
 
 /*** application/x-ape ***/
