diff -Nru pulseaudio-0.9.22.orig//src/modules/module-palm-policy.c pulseaudio-0.9.22/src/modules/module-palm-policy.c
--- pulseaudio-0.9.22.orig//src/modules/module-palm-policy.c	2011-10-26 16:09:25.000000000 +0300
+++ pulseaudio-0.9.22/src/modules/module-palm-policy.c	2011-10-26 16:09:41.000000000 +0300
@@ -122,11 +122,16 @@
 
     int sockfd;        /* descriptor for socket */
     int newsockfd;     /* descriptor for connections on socket */
+    int ctlnewsockfd;     /* descriptor for connections on socket */
+
+    char lockedsinks[eVirtualSink_Count];
 
     struct sockaddr_un name; /* filename for socket */
     pa_io_event *sockev;  /* socket event handler */
     pa_io_event *connev;            /* connection event handler */
+    pa_io_event *ctlconnev;            /* connection event handler */
     pa_bool_t connectionactive;  /* do we have an active connection on the socket */
+    pa_bool_t ctlconnectionactive;  /* do we have an active connection on the socket */
 
     // Maintain count of sinks opened, as sent to audiod, so that we can re-send data on reconnect for audiod to resync with us
     int32_t audiod_sink_input_opened[eVirtualSink_Count];
@@ -164,6 +169,8 @@
 
 static void handle_io_event_connection(pa_mainloop_api *ea, pa_io_event *e, int fd, pa_io_event_flags_t events, void *userdata);
 
+static void handle_io_event_ctl_connection(pa_mainloop_api *ea, pa_io_event *e, int fd, pa_io_event_flags_t events, void *userdata);
+
 static pa_hook_result_t route_sink_input_new_hook_callback(pa_core *c, pa_sink_input_new_data *data, struct userdata *u);
 
 static pa_hook_result_t route_source_output_new_hook_callback(pa_core *c, pa_source_output_new_data *data, struct userdata *u);
@@ -476,18 +483,50 @@
         switch (cmd)
         {
 
-        case 'd':
-            /* redirect -  D <virtualsink> <physicalsink> */
+        case 'o':
+            /* redirect override set -  O <virtualsink> <physicalsink> */
 
             if (4 == sscanf(msgbuf, "%c %d %d %d", &cmd, &parm1, &parm2, &parm3))
             {
                 /* walk list of sink-inputs on this stream and set
                  * their output sink */
+                if (parm1 < eVirtualSink_Count)
+                  u->lockedsinks[parm1] = TRUE;
+
                 virtual_sink_input_set_physical_sink(parm1, parm2, u);
                 pa_log_info("parse_message: stream redirect command received, virtual sink is %d, requested physical sink to redirect to is %d", parm1, parm2);
             }
             break;
 
+        case 'c':
+            /* redirect override clr -  C <virtualsink> <physicalsink> */
+
+            if (4 == sscanf(msgbuf, "%c %d %d %d", &cmd, &parm1, &parm2, &parm3))
+            {
+                /* walk list of sink-inputs on this stream and set
+                 * their output sink */
+                if (parm1 < eVirtualSink_Count)
+                  u->lockedsinks[parm1] = FALSE;
+
+                virtual_sink_input_set_physical_sink(parm1, 0, u);
+                pa_log_info("parse_message: stream redirect command received, virtual sink is %d, requested physical sink to redirect to is %d", parm1, parm2);
+            }
+            break;
+
+        case 'd':
+            /* redirect -  D <virtualsink> <physicalsink> */
+
+            if (4 == sscanf(msgbuf, "%c %d %d %d", &cmd, &parm1, &parm2, &parm3))
+            {
+                /* walk list of sink-inputs on this stream and set
+                 * their output sink */
+                if (parm1 < eVirtualSink_Count && !u->lockedsinks[parm1]) {
+                  virtual_sink_input_set_physical_sink(parm1, parm2, u);
+                  pa_log_info("parse_message: stream redirect command received, virtual sink is %d, requested physical sink to redirect to is %d", parm1, parm2);
+                }
+            }
+            break;
+
         case 'e':
             /* redirect -  E <virtualsink> <physicalsink> */
 
@@ -647,6 +686,19 @@
                 }
             }
         }
+        else if (-1==u->ctlnewsockfd)
+        {
+            if (-1 == (u->ctlnewsockfd = accept(u->sockfd, &(u->name),&itslen )))
+            {
+                pa_log_info("handle_io_event_socket could not create new connection on socket:%s",strerror(errno));
+            }
+            else
+            {
+                /* create new io handler to deal with data send to this connection */
+                u->ctlconnev = u->core->mainloop->io_new(u->core->mainloop, u->ctlnewsockfd, PA_IO_EVENT_INPUT | PA_IO_EVENT_HANGUP | PA_IO_EVENT_ERROR, handle_io_event_ctl_connection, u);
+                u->ctlconnectionactive = true; /* flag that we have an active connection */
+            }
+        }
         else
         {
             pa_log_info("handle_io_event_socket could not create new connection on socket, connection exists %s", __LINE__);
@@ -718,6 +770,65 @@
         pa_log_info("handle_io_event_connection PA_IO_EVENT_ERROR received");
 }
 
+static void handle_io_event_ctl_connection(pa_mainloop_api *ea, pa_io_event *e, int fd, pa_io_event_flags_t events, void *userdata)
+{
+    struct userdata *u = userdata;
+    char buf[SIZE_MESG_TO_PULSE];
+    char *errstr;
+    int bytesread;
+    int itslen;
+
+    pa_assert(u);
+    pa_assert(fd == u->ctlnewsockfd);
+
+    if (events & PA_IO_EVENT_NULL)
+    {
+        pa_log_info("handle_io_event_connection PA_IO_EVENT_NULL received");
+    }
+    if (events & PA_IO_EVENT_INPUT)
+    {
+        if (-1 == (bytesread = recv(u->ctlnewsockfd,buf,SIZE_MESG_TO_PULSE,0)))
+        {
+            pa_log_info("handle_io_event_connection Error in recv (%d): %s ",errno,strerror(errno));
+        }
+        else
+        {
+            if (bytesread!=0)  /* the socket connection will return zero bytes on EOF */
+            {
+                parse_message(buf, SIZE_MESG_TO_PULSE, u);
+            }
+        }
+    }
+    if (events & PA_IO_EVENT_OUTPUT)
+    {
+        pa_log_info("handle_io_event_connection PA_IO_EVENT_OUTPUT received");
+    }
+    if (events & PA_IO_EVENT_HANGUP)
+    {
+        pa_log_info("handle_io_event_connection PA_IO_EVENT_HANGUP received");
+        pa_log_info("handle_io_event_connection Socket is being closed");
+        /* remove ourselves from the IO list on the main loop */
+        u->core->mainloop->io_free(u->ctlconnev);
+
+        /* tear down the connection */
+        if (-1 == shutdown(u->ctlnewsockfd, SHUT_RDWR))
+        {
+            pa_log_info("Error in shutdown (%d):%s",errno,strerror(errno));
+        }
+        if (-1 == close(u->ctlnewsockfd))
+        {
+            pa_log_info("Error in close (%d):%s",errno,strerror(errno));
+        }
+
+        /* reset vars in userdata, allows another connection to be rebuilt */
+        u->ctlconnectionactive = false;
+        u->ctlconnev = NULL;
+        u->ctlnewsockfd = -1;
+    }
+    if (events & PA_IO_EVENT_ERROR)
+        pa_log_info("handle_io_event_connection PA_IO_EVENT_ERROR received");
+}
+
 static void subscribe_callback(pa_core *c, pa_subscription_event_type_t t, uint32_t idx, void *userdata)
 {
     struct userdata *u =  userdata;
@@ -892,6 +1003,8 @@
 
         // Clear audiod sink opened count
         u->audiod_sink_input_opened[i] = 0;
+
+        u->lockedsinks[i] = FALSE;
     }
     u->n_sink_input_opened = 0;
 
@@ -914,6 +1027,7 @@
 
     u->sockfd = -1;
     u->newsockfd = -1; /* set to -1 to indicate no connection */
+    u->ctlnewsockfd = -1; /* set to -1 to indicate no connection */
 
     /* create a socket for ipc with audiod the policy manager */
     path_len = strlen(PALMAUDIO_SOCK_NAME);
@@ -951,8 +1065,10 @@
     }
 
     u->connectionactive = FALSE;
+    u->ctlconnectionactive = FALSE;
     u->sockev = NULL;
     u->connev = NULL;
+    u->ctlconnev = NULL;
 
     /* register an IO event handler for the socket, deal
      * with new connections in this handler */
diff -Nru pulseaudio-0.9.22.orig//src/modules/module-palm-policy-default.h pulseaudio-0.9.22/src/modules/module-palm-policy-default.h
--- pulseaudio-0.9.22.orig//src/modules/module-palm-policy-default.h	2011-10-26 16:09:25.000000000 +0300
+++ pulseaudio-0.9.22/src/modules/module-palm-policy-default.h	2011-10-26 16:11:31.000000000 +0300
@@ -83,6 +83,8 @@
 enum EPhysicalSink {
     ePhysicalSink_pcm_output = 0,
     ePhysicalSink_a2dp,             /* virtual sink set up as a monitor source for a2dp */
+    ePhysicalSink_usb,              /* physical sink to be used for usb audio client */
+    ePhysicalSink_wifi,             /* tunneling sink for network audio client */
     ePhysicalSink_Count,    /* MUST be the last individual element. Elements below are aliases for one of the above. */
 
     // define logical outputs
diff -Nru pulseaudio-0.9.22.orig//src/modules/module-palm-policy-tables-default.h pulseaudio-0.9.22/src/modules/module-palm-policy-tables-default.h
--- pulseaudio-0.9.22.orig//src/modules/module-palm-policy-tables-default.h	2011-10-26 16:09:25.000000000 +0300
+++ pulseaudio-0.9.22/src/modules/module-palm-policy-tables-default.h	2011-10-26 16:12:08.000000000 +0300
@@ -183,6 +183,8 @@
 static struct _systemdependantphysicalsinkmap  systemdependantphysicalsinkmap[] = {
     {"pcm_output",      (uint32_t)ePhysicalSink_pcm_output},
     {"a2dp",            (uint32_t)ePhysicalSink_a2dp},
+    {"usb",            (uint32_t)ePhysicalSink_usb},
+    {"wifi",            (uint32_t)ePhysicalSink_wifi},
     {NULL, 0}
 } ;
 
